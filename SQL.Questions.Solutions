 üßÆ SQL Questions and Solutions

1) Total Orders and Quantity per Customer

Question: 
Find the total number of orders and the total quantity of items ordered by each customer.

SQL Query:
```sql
SELECT 
    c.c_id AS customer_id,
    c.cname AS customer_name,
    COUNT(o.qty) AS total_orders,
    SUM(o.qty) AS total_quantity
FROM public.customer c
INNER JOIN public.orders o USING(c_id)
GROUP BY c.c_id, c.cname;
```
2) Average and Maximum Product Price per Category

Question:
Find the average price and the maximum (most expensive) price of products in each product category.

SQL Query:
```sql
SELECT 
  category,
  ROUND(AVG(price)) AS avg_price,
  MAX(price) AS max_price
FROM 
  public.product
GROUP BY 
  category;
  ```
3) Customer Count per City (Descending Order)

Question:
Find the number of customers in each city and sort the results in descending order, starting from the city with the most customers.

SQL Query:
```sql
SELECT 
  city,
  COUNT(cname) AS customer_count
FROM 
  public.customer
GROUP BY 
  city
ORDER BY 
  customer_count DESC;
```

4) Average Commission Percentage per Delivery Company

Question:
Calculate the average commission percentage (AVG(Percent_Cut)) taken by each delivery company.

 SQL Query:
```sql

SELECT 
  dp_id,
  dp_name,
  AVG(percent_cut) AS avg_percent_cut
FROM 
  public.delivery
GROUP BY 
  dp_id, dp_name;
```


5) Total Sales Amount per Brand

Question:
Calculate the total sales amount for each brand by multiplying the price and quantity of products sold.

SQL Query:
```sql
SELECT 
  brand,
  ROUND(SUM(price * qty)) AS total_sales_amount
FROM 
  public.product
INNER JOIN 
  public.orders USING (p_id)
GROUP BY 
  brand;
```

6) Most Ordered Products

Question:
Find the most frequently ordered products by showing each product‚Äôs name and the total quantity ordered. Sort the results in descending order of total quantity.

SQL Query:
```sql
SELECT 
  p_id,
  pname AS product_name,
  SUM(qty) AS total_quantity
FROM 
  public.product
INNER JOIN 
  public.orders USING(p_id)
GROUP BY 
  p_id, pname
ORDER BY 
  total_quantity DESC;
```

7) Most Frequently Used Discount Coupons

Question:
Display the discount coupons that have been used the most, along with the number of times (or total discount amount) they were used. Sort the results by usage in descending order.

SQL Query:
```sql
SELECT 
  coupon AS coupon_code,
  SUM(coupon_discount) AS total_usage
FROM 
  public.orders
GROUP BY 
  coupon
ORDER BY 
  total_usage DESC;
```

8) Total Sales Amount for Orders in 2024

Question:
Calculate the total sales amount for all orders placed in the year 2024 by multiplying the product price by the quantity ordered.

SQL Query:
```sql
SELECT 
  ROUND(SUM(price * qty)) AS total_sales_2024
FROM 
  public.orders
INNER JOIN 
  public.product USING (p_id)
WHERE 
  EXTRACT(YEAR FROM order_date) = 2024;
```

9) Total Sales Amount and Average Product Price per Brand

Question:
For each brand, calculate:
The total sales amount (price √ó quantity)
The average product price
Sort the results in descending order of total sales amount.

SQL Query:
```sql
SELECT 
  brand AS brand_name,
  ROUND(SUM(price * qty)) AS total_sales_amount,
  ROUND(AVG(price)) AS avg_product_price
FROM 
  public.product
INNER JOIN 
  public.orders USING (p_id)
GROUP BY 
  brand
ORDER BY 
  total_sales_amount DESC;
```

10) Total Orders and Average Discount Percentage per Delivery Provider

Question:
For each delivery provider, find:
The total number of orders they have handled.
The average discount percentage given on those orders.
Sort the results starting with the delivery provider that accepted the most orders.

SQL Query:
```sql
SELECT 
  d.DP_name,
  COUNT(o.qty) AS total_orders,
  AVG(o.Coupon_Discount) AS avg_discount_percent
FROM 
  public.orders o
INNER JOIN 
  public.delivery d ON o.DP_ID = d.DP_ID
GROUP BY 
  d.DP_name
ORDER BY 
  total_orders DESC;
```

11) Group Customers by Age

Question:
Classify customers into age groups based on their age:
Under 25 ‚Üí ‚ÄúG…ônc‚Äù (Young)
Between 25 and 50 ‚Üí ‚ÄúYetkin‚Äù (Adult)
Over 50 ‚Üí ‚ÄúYa≈ülƒ±‚Äù (Senior)

SQL Query:
```sql
SELECT 
  cname,
  age,
  CASE
    WHEN age < 25 THEN 'G…ônc'
    WHEN age BETWEEN 25 AND 50 THEN 'Yetkin'
    ELSE 'Ya≈ülƒ±'
  END AS yas_qruplari
FROM 
  public.customer;
```

12) Classify Coupon Effectiveness Based on Discount Percentage

Question:
Determine the effectiveness of discount coupons based on their discount percentage:
Greater than or equal to 15% ‚Üí ‚ÄúEffektiv‚Äù (Effective)
Between 5% and 14% ‚Üí ‚ÄúOrta‚Äù (Medium)
Less than 5% ‚Üí ‚ÄúZ…ôif‚Äù (Weak)

SQL Query:
```sql
SELECT 
  coupon,
  coupon_discount,
  CASE
    WHEN coupon_discount >= 15 THEN 'Effektiv'
    WHEN coupon_discount BETWEEN 5 AND 14 THEN 'Orta'
    ELSE 'Z…ôif'
  END AS veziyyet
FROM 
  public.orders;
```

13) Delivery Provider Order Count and Discount Level Report

Question:
Create a report for each delivery provider showing:
The total number of orders
The discount level based on the average coupon discount percentage:
Above 15% ‚Üí ‚ÄúY√ºks…ôk Endirim‚Äù (High Discount)
Between 10% and 15% ‚Üí ‚ÄúOrta Endirim‚Äù (Medium Discount)
Below 10% ‚Üí ‚ÄúA≈üaƒüƒ± Endirim‚Äù (Low Discount)
Sort the results by the number of orders in descending order.

SQL Query:
```sql
SELECT 
  dp_id,
  dp_name,
  SUM(qty) AS total_orders,
  CASE 
    WHEN AVG(coupon_discount) > 15 THEN 'Y√ºks…ôk Endirim'
    WHEN AVG(coupon_discount) BETWEEN 10 AND 15 THEN 'Orta Endirim'
    ELSE 'A≈üaƒüƒ± Endirim'
  END AS discount_level
FROM 
  public.delivery
INNER JOIN 
  public.orders USING(dp_id)
GROUP BY 
  dp_id, dp_name
ORDER BY 
  total_orders DESC;
```

13) Find the First, Second, and Third Order Numbers per Customer by Order Date

Question:
For each customer (c_id), rank their orders by order date and retrieve their first, second, and third orders.

SQL Query:
```sql
SELECT 
    c_id,
    cname,
    orderdate_rank
FROM (
    SELECT 
        c.c_id,
        c.cname,
        o.order_date,
        RANK() OVER (PARTITION BY c.c_id ORDER BY o.order_date) AS orderdate_rank
    FROM 
        public.customer c
    INNER JOIN 
        public.orders o ON c.c_id = o.c_id
) AS ranked_orders
WHERE 
    orderdate_rank <= 3;
```

14) Top 3 Most Ordered Products by Number of Orders

Question:
Rank products by the number of orders they have received and identify the top 3 most ordered products.

SQL Query:
```sql
SELECT 
  p_id,
  total_orders,
  rank_qty
FROM (
  SELECT 
    p_id,
    COUNT(or_id) AS total_orders,
    RANK() OVER (ORDER BY COUNT(or_id) DESC) AS rank_qty
  FROM 
    public.orders
  INNER JOIN 
    public.product USING (p_id)
  GROUP BY 
    p_id
) AS ranked
WHERE 
  rank_qty <= 3;
```


15) Rank Customers by Age within Each City (Descending Order)

Question:
For each city, rank customers by their age in descending order and display their age ranking within the city.

SQL Query:
```sql
SELECT 
  c.c_id,
  c.cname,
  c.city,
  c.age,
  DENSE_RANK() OVER (PARTITION BY c.city ORDER BY c.age DESC) AS age_rank
FROM 
  public.customer c;
```

16) Find the Next Order Date for Each Customer

Question:
For each customer (c_id), find the next order date following each order by using window functions.

SQL Query:
```sql
SELECT 
  o.*,
  LEAD(order_date) OVER (PARTITION BY c_id ORDER BY order_date ASC) AS next_order_date
FROM 
  public.orders o;
```

17) Show Previous Order Date and Days Difference Between Orders for Each Customer

Question:
For each customer, display the previous order date and the difference in days between consecutive orders.

SQL Query:
```sql
SELECT 
  c_id,
  order_date,
  order_date - LAG(order_date) OVER (PARTITION BY c_id ORDER BY order_date) AS days_diff
FROM 
  public.orders;
```

18) Show Previous and Next Orders by Delivery Provider

Question:
For each delivery provider (dp_id), order their deliveries by date and show the previous and next order dates relative to each order.

SQL Query:
```sql
SELECT 
  dp_id,
  order_date,
  LAG(order_date) OVER (PARTITION BY dp_id ORDER BY order_date ASC) AS prev_order,
  LEAD(order_date) OVER (PARTITION BY dp_id ORDER BY order_date ASC) AS next_order
FROM 
  public.orders;
```

19) Average Discount and Rank per Coupon Type

Question:
For each coupon type, calculate the average discount and assign rank values based on the average discount in ascending order.

SQL Query:
```sql
SELECT 
    coupon,
    avg_discount,
    RANK() OVER (ORDER BY avg_discount ASC) AS discount_rank
FROM (
    SELECT 
        coupon,
        AVG(coupon_discount) AS avg_discount
    FROM 
        public.orders
    GROUP BY 
        coupon
) AS avg_table;
```

20) Find the Top 3 Customers by Quantity Ordered

Question:
Identify the top 3 customers who placed the highest quantity orders.

SQL Query:
```sql
SELECT 
    c_id,
    cname,
    qty_ranked
FROM (
    SELECT 
        o.c_id,
        c.cname,
        o.qty,
        RANK() OVER (PARTITION BY o.c_id ORDER BY o.qty DESC) AS qty_ranked
    FROM 
        public.orders o
    INNER JOIN 
        public.customer c USING (c_id)
) AS ranked_orders
WHERE 
    qty_ranked <= 3;
```
